package bot

import (
	"fmt"
	"log"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	MaxRounds    = 10
	MinRounds    = 1
	DefaultWork  = 25 * time.Minute
	DefaultBreak = 5 * time.Minute
)

func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID

	if update.Message.IsCommand() {
		handleCommand(bot, chatID, update.Message.Command())
		return
	}

	handleUserInput(bot, chatID, update.Message.Text)
}

func handleCommand(bot *tgbotapi.BotAPI, chatID int64, command string) {
	switch command {
	case "start":
		send(bot, chatID, `–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è üçÖ

–ù–∞–ø–∏—à–∏ /runpomodoro, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–∏—é —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –ü–æ–º–∏–¥–æ—Ä–æ. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ 25-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –±—É–¥–µ—Ç 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞.

–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –Ω–∞–ø–∏—à–∏ /help.`)

	case "help":
		send(bot, chatID, `–ß—Ç–æ —è —É–º–µ—é:

/runpomodoro ‚Äî –Ω–∞—á–∞—Ç—å —Å–µ—Ä–∏—é —Ç–∞–π–º–µ—Ä–æ–≤  
/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é  
/status ‚Äî —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏  
/music ‚Äî –ø–æ–ª—É—á–∏—Ç—å –º—É–∑—ã–∫—É –¥–ª—è —Ñ–æ–Ω–∞`)

	case "runpomodoro":
		if session, ok := Store.Get(chatID); ok && session.Timer != nil {
			send(bot, chatID, "–£ —Ç–µ–±—è —É–∂–µ –∏–¥—ë—Ç —Å–µ—Å—Å–∏—è. –ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
			return
		}

		Store.Set(chatID, &PomodoroSession{AwaitingInput: true})
		send(bot, chatID, "–°–∫–æ–ª—å–∫–æ —Ä–∞—É–Ω–¥–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")

	case "stop":
		stopSession(bot, chatID)

	case "status":
		handleStatus(bot, chatID)

	case "music":
		sendHTML(bot, chatID,
			`–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –º—É–∑—ã–∫–æ–π –¥–ª—è —Ñ–æ–Ω–∞:

<a href="https://youtu.be/t3LCXpKI9K0?si=27yfd61dEv82lgVj">Redwood Resonance</a>  
<a href="https://youtu.be/wIBnaNuhuCQ?si=dTYX0vD-3ZLqUi7e">ASMR New York Library</a>  
<a href="https://youtu.be/ecechHEtkYU?si=uzsf6K7IV7WKvtVl">quiet mornings, slowly waking up to the smell of fresh coffee</a>  
<a href="https://youtu.be/tFAjJsqdO_A?si=cpy3BS__3J9-6Fjz">Harry Potter Chill Music ~ Hogwarts Library</a>`)
	default:
		send(bot, chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
	}
}

func handleUserInput(bot *tgbotapi.BotAPI, chatID int64, text string) {
	session, ok := Store.Get(chatID)
	if !ok || !session.AwaitingInput {
		return
	}

	n, err := strconv.Atoi(text)
	if err != nil || n < MinRounds || n > MaxRounds {
		send(bot, chatID, fmt.Sprintf("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç %d –¥–æ %d.", MinRounds, MaxRounds))
		return
	}

	session.AwaitingInput = false
	session.TotalRounds = n
	session.CurrentRound = 1
	session.Phase = PhaseWork
	session.StartTime = time.Now()

	Store.Set(chatID, session) // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

	startWorkRound(bot, chatID)
}

func startWorkRound(bot *tgbotapi.BotAPI, chatID int64) {
	session, ok := Store.Get(chatID)
	if !ok {
		return
	}

	session.Phase = PhaseWork
	session.StartTime = time.Now()

	send(bot, chatID, fmt.Sprintf("–†–∞—É–Ω–¥ %d: –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞ 25 –º–∏–Ω—É—Ç!", session.CurrentRound))

	session.Timer = time.AfterFunc(DefaultWork, func() {
		send(bot, chatID, "‚è∞ –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞! 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞.")
		startBreak(bot, chatID)
	})

	Store.Set(chatID, session) // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
}

func startBreak(bot *tgbotapi.BotAPI, chatID int64) {
	session, ok := Store.Get(chatID)
	if !ok {
		return
	}

	session.Phase = PhaseBreak
	session.StartTime = time.Now()

	session.Timer = time.AfterFunc(DefaultBreak, func() {
		session.CurrentRound++

		if session.CurrentRound > session.TotalRounds {
			send(bot, chatID, "üéâ –í—Å–µ —Ä–∞—É–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
			Store.Delete(chatID)
			return
		}

		send(bot, chatID, fmt.Sprintf("üîî –ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥ %d!", session.CurrentRound))
		startWorkRound(bot, chatID)
	})

	Store.Set(chatID, session) // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
}

func handleStatus(bot *tgbotapi.BotAPI, chatID int64) {
	session, ok := Store.Get(chatID)
	if !ok {
		send(bot, chatID, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
		return
	}

	var duration time.Duration
	switch session.Phase {
	case PhaseWork:
		duration = DefaultWork
	case PhaseBreak:
		duration = DefaultBreak
	default:
		send(bot, chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞.")
		return
	}

	remaining := duration - time.Since(session.StartTime)
	if remaining < 0 {
		remaining = 0
	}

	msg := fmt.Sprintf(
		"üìä –†–∞—É–Ω–¥ %d –∏–∑ %d\n–§–∞–∑–∞: %s\n–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: %v",
		session.CurrentRound, session.TotalRounds, session.Phase, remaining.Round(time.Second),
	)
	send(bot, chatID, msg)
}

func stopSession(bot *tgbotapi.BotAPI, chatID int64) {
	session, ok := Store.Get(chatID)
	if !ok {
		send(bot, chatID, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
		return
	}

	if session.Timer != nil {
		session.Timer.Stop()
	}
	Store.Delete(chatID)
	send(bot, chatID, "‚èπ –°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
}

func send(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}
}

func sendHTML(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (HTML): %v", err)
	}
}
